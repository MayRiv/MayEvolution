using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace MayEvolutionModels
{
  /// <summary>
  /// Description of Human.
  /// </summary>
  class Human: Creature
  {
      public this(x:double, y:double, strength:float, speed:float, viewRadius:float,breedingCycle:int,hungerFear:float,hungerSpeed:float)
      {
        base(x, y, strength, speed,viewRadius,breedingCycle,hungerFear,hungerSpeed);
      }
      override public ChangeState():void
      {
          def moveTo = (e:Entity) => {
            def (dx,dy) = ((e.X-this.X), (e.Y - this.Y));
            
            this.X+=if (Math.Abs(dx) > speed) speed*Math.Abs(dx)/dx;
                    else dx;
            this.Y+=if (Math.Abs(dy) > speed) speed*Math.Abs(dy)/dy;
                    else dy;          
          }
          def near = (e:Entity) => {
              Math.Sqrt(Math.Pow((this.X - e.X),2) + Math.Pow((this.Y-e.Y),2)) < speed;
          }
          
          if(hunger < hungerFear)
          {
              def food = findNearestFood();
              match(food)
              {
                |food is Food =>
                {
                  moveTo(food);
                
                  when(near(food))
                  {
                     eat(food);
                  }
                }
                | _ => {moveSomewhere()}
              }
          }
          else
          {
               match(findNearestCreature())
               {
                |c is Creature =>
                {
                    moveTo(c);
                    when (near(c))
                    {
                       //Map.Instance.Entities = doSex(c)::Map.Instance.Entities;   FAIL
                    }
                }
                |_ => moveSomewhere();
               }
               moveSomewhere();
               
          }
          hunger-=hungerSpeed;
          this.daysFromBreeding--;
          when(hunger <= 0) this.Dead = true;

      }
      
  }
}
